"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nuqs";
exports.ids = ["vendor-chunks/nuqs"];
exports.modules = {

/***/ "(ssr)/./node_modules/nuqs/dist/context-BWo_DoaC.js":
/*!****************************************************!*\
  !*** ./node_modules/nuqs/dist/context-BWo_DoaC.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   context: () => (/* binding */ context),\n/* harmony export */   createAdapterProvider: () => (/* binding */ createAdapterProvider),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   renderQueryString: () => (/* binding */ renderQueryString),\n/* harmony export */   useAdapter: () => (/* binding */ useAdapter),\n/* harmony export */   useAdapterDefaultOptions: () => (/* binding */ useAdapterDefaultOptions),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n//#region src/lib/debug.ts\nconst debugEnabled = isDebugEnabled();\nfunction debug(message, ...args) {\n\tif (!debugEnabled) return;\n\tconst msg = sprintf(message, ...args);\n\tperformance.mark(msg);\n\ttry {\n\t\tconsole.log(message, ...args);\n\t} catch {\n\t\tconsole.log(msg);\n\t}\n}\nfunction warn(message, ...args) {\n\tif (!debugEnabled) return;\n\tconsole.warn(message, ...args);\n}\nfunction sprintf(base, ...args) {\n\treturn base.replace(/%[sfdO]/g, (match) => {\n\t\tconst arg = args.shift();\n\t\treturn match === \"%O\" && arg ? JSON.stringify(arg).replace(/\"([^\"]+)\":/g, \"$1:\") : String(arg);\n\t});\n}\nfunction isDebugEnabled() {\n\ttry {\n\t\tconst test = \"nuqs-localStorage-test\";\n\t\tif (typeof localStorage === \"undefined\") return false;\n\t\tlocalStorage.setItem(test, test);\n\t\tconst isStorageAvailable = localStorage.getItem(test) === test;\n\t\tlocalStorage.removeItem(test);\n\t\treturn isStorageAvailable && (localStorage.getItem(\"debug\") || \"\").includes(\"nuqs\");\n\t} catch {\n\t\treturn false;\n\t}\n}\n\n//#endregion\n//#region src/lib/errors.ts\nconst errors = {\n\t303: \"Multiple adapter contexts detected. This might happen in monorepos.\",\n\t404: \"nuqs requires an adapter to work with your framework.\",\n\t409: \"Multiple versions of the library are loaded. This may lead to unexpected behavior. Currently using `%s`, but `%s` (via the %s adapter) was about to load on top.\",\n\t414: \"Max safe URL length exceeded. Some browsers may not be able to accept this URL. Consider limiting the amount of state stored in the URL.\",\n\t429: \"URL update rate-limited by the browser. Consider increasing `throttleMs` for key(s) `%s`. %O\",\n\t500: \"Empty search params cache. Search params can't be accessed in Layouts.\",\n\t501: \"Search params cache already populated. Have you called `parse` twice?\"\n};\nfunction error(code) {\n\treturn `[nuqs] ${errors[code]}\n  See https://err.47ng.com/NUQS-${code}`;\n}\n\n//#endregion\n//#region src/lib/url-encoding.ts\nfunction renderQueryString(search) {\n\tif (search.size === 0) return \"\";\n\tconst query = [];\n\tfor (const [key, value] of search.entries()) {\n\t\tconst safeKey = key.replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\\+/g, \"%2B\").replace(/=/g, \"%3D\").replace(/\\?/g, \"%3F\");\n\t\tquery.push(`${safeKey}=${encodeQueryValue(value)}`);\n\t}\n\tconst queryString = \"?\" + query.join(\"&\");\n\twarnIfURLIsTooLong(queryString);\n\treturn queryString;\n}\nfunction encodeQueryValue(input) {\n\treturn input.replace(/%/g, \"%25\").replace(/\\+/g, \"%2B\").replace(/ /g, \"+\").replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\"/g, \"%22\").replace(/'/g, \"%27\").replace(/`/g, \"%60\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/[\\x00-\\x1F]/g, (char) => encodeURIComponent(char));\n}\nconst URL_MAX_LENGTH = 2e3;\nfunction warnIfURLIsTooLong(queryString) {\n\tif (false) {}\n\tif (typeof location === \"undefined\") return;\n\tconst url = new URL(location.href);\n\turl.search = queryString;\n\tif (url.href.length > URL_MAX_LENGTH) console.warn(error(414));\n}\n\n//#endregion\n//#region src/adapters/lib/context.ts\nconst context = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({ useAdapter() {\n\tthrow new Error(error(404));\n} });\ncontext.displayName = \"NuqsAdapterContext\";\nif (debugEnabled && typeof window !== \"undefined\") {\n\tif (window.__NuqsAdapterContext && window.__NuqsAdapterContext !== context) console.error(error(303));\n\twindow.__NuqsAdapterContext = context;\n}\n/**\n* Create a custom adapter (context provider) for nuqs to work with your framework / router.\n*\n* Adapters are based on React Context,\n*\n* @param useAdapter\n* @returns\n*/\nfunction createAdapterProvider(useAdapter$1) {\n\treturn ({ children, defaultOptions,...props }) => (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(context.Provider, {\n\t\t...props,\n\t\tvalue: {\n\t\t\tuseAdapter: useAdapter$1,\n\t\t\tdefaultOptions\n\t\t}\n\t}, children);\n}\nfunction useAdapter(watchKeys) {\n\tconst value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n\tif (!(\"useAdapter\" in value)) throw new Error(error(404));\n\treturn value.useAdapter(watchKeys);\n}\nconst useAdapterDefaultOptions = () => (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context).defaultOptions;\n\n//#endregion\n\n//# sourceMappingURL=context-BWo_DoaC.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbnVxcy9kaXN0L2NvbnRleHQtQldvX0RvYUMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWlFOztBQUVqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsa0NBQWtDLEtBQUs7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUSxHQUFHLHdCQUF3QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssS0FBcUMsRUFBRSxFQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixvREFBYSxHQUFHO0FBQ2hDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1DQUFtQyxLQUFLLG9EQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLGVBQWUsaURBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGlEQUFVOztBQUVqRDtBQUN1SDtBQUN2SCIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvbnVxcy9kaXN0L2NvbnRleHQtQldvX0RvYUMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgY3JlYXRlRWxlbWVudCwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyNyZWdpb24gc3JjL2xpYi9kZWJ1Zy50c1xuY29uc3QgZGVidWdFbmFibGVkID0gaXNEZWJ1Z0VuYWJsZWQoKTtcbmZ1bmN0aW9uIGRlYnVnKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcblx0aWYgKCFkZWJ1Z0VuYWJsZWQpIHJldHVybjtcblx0Y29uc3QgbXNnID0gc3ByaW50ZihtZXNzYWdlLCAuLi5hcmdzKTtcblx0cGVyZm9ybWFuY2UubWFyayhtc2cpO1xuXHR0cnkge1xuXHRcdGNvbnNvbGUubG9nKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuXHR9IGNhdGNoIHtcblx0XHRjb25zb2xlLmxvZyhtc2cpO1xuXHR9XG59XG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcblx0aWYgKCFkZWJ1Z0VuYWJsZWQpIHJldHVybjtcblx0Y29uc29sZS53YXJuKG1lc3NhZ2UsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc3ByaW50ZihiYXNlLCAuLi5hcmdzKSB7XG5cdHJldHVybiBiYXNlLnJlcGxhY2UoLyVbc2ZkT10vZywgKG1hdGNoKSA9PiB7XG5cdFx0Y29uc3QgYXJnID0gYXJncy5zaGlmdCgpO1xuXHRcdHJldHVybiBtYXRjaCA9PT0gXCIlT1wiICYmIGFyZyA/IEpTT04uc3RyaW5naWZ5KGFyZykucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKSA6IFN0cmluZyhhcmcpO1xuXHR9KTtcbn1cbmZ1bmN0aW9uIGlzRGVidWdFbmFibGVkKCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IHRlc3QgPSBcIm51cXMtbG9jYWxTdG9yYWdlLXRlc3RcIjtcblx0XHRpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGZhbHNlO1xuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRlc3QsIHRlc3QpO1xuXHRcdGNvbnN0IGlzU3RvcmFnZUF2YWlsYWJsZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRlc3QpID09PSB0ZXN0O1xuXHRcdGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRlc3QpO1xuXHRcdHJldHVybiBpc1N0b3JhZ2VBdmFpbGFibGUgJiYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZGVidWdcIikgfHwgXCJcIikuaW5jbHVkZXMoXCJudXFzXCIpO1xuXHR9IGNhdGNoIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gc3JjL2xpYi9lcnJvcnMudHNcbmNvbnN0IGVycm9ycyA9IHtcblx0MzAzOiBcIk11bHRpcGxlIGFkYXB0ZXIgY29udGV4dHMgZGV0ZWN0ZWQuIFRoaXMgbWlnaHQgaGFwcGVuIGluIG1vbm9yZXBvcy5cIixcblx0NDA0OiBcIm51cXMgcmVxdWlyZXMgYW4gYWRhcHRlciB0byB3b3JrIHdpdGggeW91ciBmcmFtZXdvcmsuXCIsXG5cdDQwOTogXCJNdWx0aXBsZSB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeSBhcmUgbG9hZGVkLiBUaGlzIG1heSBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IuIEN1cnJlbnRseSB1c2luZyBgJXNgLCBidXQgYCVzYCAodmlhIHRoZSAlcyBhZGFwdGVyKSB3YXMgYWJvdXQgdG8gbG9hZCBvbiB0b3AuXCIsXG5cdDQxNDogXCJNYXggc2FmZSBVUkwgbGVuZ3RoIGV4Y2VlZGVkLiBTb21lIGJyb3dzZXJzIG1heSBub3QgYmUgYWJsZSB0byBhY2NlcHQgdGhpcyBVUkwuIENvbnNpZGVyIGxpbWl0aW5nIHRoZSBhbW91bnQgb2Ygc3RhdGUgc3RvcmVkIGluIHRoZSBVUkwuXCIsXG5cdDQyOTogXCJVUkwgdXBkYXRlIHJhdGUtbGltaXRlZCBieSB0aGUgYnJvd3Nlci4gQ29uc2lkZXIgaW5jcmVhc2luZyBgdGhyb3R0bGVNc2AgZm9yIGtleShzKSBgJXNgLiAlT1wiLFxuXHQ1MDA6IFwiRW1wdHkgc2VhcmNoIHBhcmFtcyBjYWNoZS4gU2VhcmNoIHBhcmFtcyBjYW4ndCBiZSBhY2Nlc3NlZCBpbiBMYXlvdXRzLlwiLFxuXHQ1MDE6IFwiU2VhcmNoIHBhcmFtcyBjYWNoZSBhbHJlYWR5IHBvcHVsYXRlZC4gSGF2ZSB5b3UgY2FsbGVkIGBwYXJzZWAgdHdpY2U/XCJcbn07XG5mdW5jdGlvbiBlcnJvcihjb2RlKSB7XG5cdHJldHVybiBgW251cXNdICR7ZXJyb3JzW2NvZGVdfVxuICBTZWUgaHR0cHM6Ly9lcnIuNDduZy5jb20vTlVRUy0ke2NvZGV9YDtcbn1cblxuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gc3JjL2xpYi91cmwtZW5jb2RpbmcudHNcbmZ1bmN0aW9uIHJlbmRlclF1ZXJ5U3RyaW5nKHNlYXJjaCkge1xuXHRpZiAoc2VhcmNoLnNpemUgPT09IDApIHJldHVybiBcIlwiO1xuXHRjb25zdCBxdWVyeSA9IFtdO1xuXHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2guZW50cmllcygpKSB7XG5cdFx0Y29uc3Qgc2FmZUtleSA9IGtleS5yZXBsYWNlKC8jL2csIFwiJTIzXCIpLnJlcGxhY2UoLyYvZywgXCIlMjZcIikucmVwbGFjZSgvXFwrL2csIFwiJTJCXCIpLnJlcGxhY2UoLz0vZywgXCIlM0RcIikucmVwbGFjZSgvXFw/L2csIFwiJTNGXCIpO1xuXHRcdHF1ZXJ5LnB1c2goYCR7c2FmZUtleX09JHtlbmNvZGVRdWVyeVZhbHVlKHZhbHVlKX1gKTtcblx0fVxuXHRjb25zdCBxdWVyeVN0cmluZyA9IFwiP1wiICsgcXVlcnkuam9pbihcIiZcIik7XG5cdHdhcm5JZlVSTElzVG9vTG9uZyhxdWVyeVN0cmluZyk7XG5cdHJldHVybiBxdWVyeVN0cmluZztcbn1cbmZ1bmN0aW9uIGVuY29kZVF1ZXJ5VmFsdWUoaW5wdXQpIHtcblx0cmV0dXJuIGlucHV0LnJlcGxhY2UoLyUvZywgXCIlMjVcIikucmVwbGFjZSgvXFwrL2csIFwiJTJCXCIpLnJlcGxhY2UoLyAvZywgXCIrXCIpLnJlcGxhY2UoLyMvZywgXCIlMjNcIikucmVwbGFjZSgvJi9nLCBcIiUyNlwiKS5yZXBsYWNlKC9cIi9nLCBcIiUyMlwiKS5yZXBsYWNlKC8nL2csIFwiJTI3XCIpLnJlcGxhY2UoL2AvZywgXCIlNjBcIikucmVwbGFjZSgvPC9nLCBcIiUzQ1wiKS5yZXBsYWNlKC8+L2csIFwiJTNFXCIpLnJlcGxhY2UoL1tcXHgwMC1cXHgxRl0vZywgKGNoYXIpID0+IGVuY29kZVVSSUNvbXBvbmVudChjaGFyKSk7XG59XG5jb25zdCBVUkxfTUFYX0xFTkdUSCA9IDJlMztcbmZ1bmN0aW9uIHdhcm5JZlVSTElzVG9vTG9uZyhxdWVyeVN0cmluZykge1xuXHRpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSByZXR1cm47XG5cdGlmICh0eXBlb2YgbG9jYXRpb24gPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcblx0Y29uc3QgdXJsID0gbmV3IFVSTChsb2NhdGlvbi5ocmVmKTtcblx0dXJsLnNlYXJjaCA9IHF1ZXJ5U3RyaW5nO1xuXHRpZiAodXJsLmhyZWYubGVuZ3RoID4gVVJMX01BWF9MRU5HVEgpIGNvbnNvbGUud2FybihlcnJvcig0MTQpKTtcbn1cblxuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gc3JjL2FkYXB0ZXJzL2xpYi9jb250ZXh0LnRzXG5jb25zdCBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7IHVzZUFkYXB0ZXIoKSB7XG5cdHRocm93IG5ldyBFcnJvcihlcnJvcig0MDQpKTtcbn0gfSk7XG5jb250ZXh0LmRpc3BsYXlOYW1lID0gXCJOdXFzQWRhcHRlckNvbnRleHRcIjtcbmlmIChkZWJ1Z0VuYWJsZWQgJiYgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRpZiAod2luZG93Ll9fTnVxc0FkYXB0ZXJDb250ZXh0ICYmIHdpbmRvdy5fX051cXNBZGFwdGVyQ29udGV4dCAhPT0gY29udGV4dCkgY29uc29sZS5lcnJvcihlcnJvcigzMDMpKTtcblx0d2luZG93Ll9fTnVxc0FkYXB0ZXJDb250ZXh0ID0gY29udGV4dDtcbn1cbi8qKlxuKiBDcmVhdGUgYSBjdXN0b20gYWRhcHRlciAoY29udGV4dCBwcm92aWRlcikgZm9yIG51cXMgdG8gd29yayB3aXRoIHlvdXIgZnJhbWV3b3JrIC8gcm91dGVyLlxuKlxuKiBBZGFwdGVycyBhcmUgYmFzZWQgb24gUmVhY3QgQ29udGV4dCxcbipcbiogQHBhcmFtIHVzZUFkYXB0ZXJcbiogQHJldHVybnNcbiovXG5mdW5jdGlvbiBjcmVhdGVBZGFwdGVyUHJvdmlkZXIodXNlQWRhcHRlciQxKSB7XG5cdHJldHVybiAoeyBjaGlsZHJlbiwgZGVmYXVsdE9wdGlvbnMsLi4ucHJvcHMgfSkgPT4gY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG5cdFx0Li4ucHJvcHMsXG5cdFx0dmFsdWU6IHtcblx0XHRcdHVzZUFkYXB0ZXI6IHVzZUFkYXB0ZXIkMSxcblx0XHRcdGRlZmF1bHRPcHRpb25zXG5cdFx0fVxuXHR9LCBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiB1c2VBZGFwdGVyKHdhdGNoS2V5cykge1xuXHRjb25zdCB2YWx1ZSA9IHVzZUNvbnRleHQoY29udGV4dCk7XG5cdGlmICghKFwidXNlQWRhcHRlclwiIGluIHZhbHVlKSkgdGhyb3cgbmV3IEVycm9yKGVycm9yKDQwNCkpO1xuXHRyZXR1cm4gdmFsdWUudXNlQWRhcHRlcih3YXRjaEtleXMpO1xufVxuY29uc3QgdXNlQWRhcHRlckRlZmF1bHRPcHRpb25zID0gKCkgPT4gdXNlQ29udGV4dChjb250ZXh0KS5kZWZhdWx0T3B0aW9ucztcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBjb250ZXh0LCBjcmVhdGVBZGFwdGVyUHJvdmlkZXIsIGRlYnVnLCBlcnJvciwgcmVuZGVyUXVlcnlTdHJpbmcsIHVzZUFkYXB0ZXIsIHVzZUFkYXB0ZXJEZWZhdWx0T3B0aW9ucywgd2FybiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC1CV29fRG9hQy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nuqs/dist/context-BWo_DoaC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/nuqs/dist/debounce-CmqzOOem.js":
/*!*****************************************************!*\
  !*** ./node_modules/nuqs/dist/debounce-CmqzOOem.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmitter: () => (/* binding */ createEmitter),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   debounceController: () => (/* binding */ debounceController),\n/* harmony export */   defaultRateLimit: () => (/* binding */ defaultRateLimit),\n/* harmony export */   globalThrottleQueue: () => (/* binding */ globalThrottleQueue),\n/* harmony export */   throttle: () => (/* binding */ throttle)\n/* harmony export */ });\n/* harmony import */ var _context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context-BWo_DoaC.js */ \"(ssr)/./node_modules/nuqs/dist/context-BWo_DoaC.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n//#region src/lib/queues/rate-limiting.ts\nfunction getDefaultThrottle() {\n\tif (typeof window === \"undefined\") return 50;\n\tconst isSafari = Boolean(window.GestureEvent);\n\tif (!isSafari) return 50;\n\ttry {\n\t\tconst match = navigator.userAgent?.match(/version\\/([\\d\\.]+) safari/i);\n\t\treturn parseFloat(match[1]) >= 17 ? 120 : 320;\n\t} catch {\n\t\treturn 320;\n\t}\n}\nfunction throttle(timeMs) {\n\treturn {\n\t\tmethod: \"throttle\",\n\t\ttimeMs\n\t};\n}\nfunction debounce(timeMs) {\n\treturn {\n\t\tmethod: \"debounce\",\n\t\ttimeMs\n\t};\n}\nconst defaultRateLimit = throttle(getDefaultThrottle());\n\n//#endregion\n//#region src/lib/emitter.ts\nfunction createEmitter() {\n\tconst all = /* @__PURE__ */ new Map();\n\treturn {\n\t\tall,\n\t\ton(type, handler) {\n\t\t\tconst handlers = all.get(type) || [];\n\t\t\thandlers.push(handler);\n\t\t\tall.set(type, handlers);\n\t\t\treturn () => this.off(type, handler);\n\t\t},\n\t\toff(type, handler) {\n\t\t\tconst handlers = all.get(type);\n\t\t\tif (handlers) all.set(type, handlers.filter((h) => h !== handler));\n\t\t},\n\t\temit(type, event) {\n\t\t\tconst handlers = all.get(type);\n\t\t\thandlers?.forEach((handler) => handler(event));\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/lib/timeout.ts\nfunction timeout(callback, ms, signal) {\n\tfunction onTick() {\n\t\tcallback();\n\t\tsignal.removeEventListener(\"abort\", onAbort);\n\t}\n\tconst id = setTimeout(onTick, ms);\n\tfunction onAbort() {\n\t\tclearTimeout(id);\n\t\tsignal.removeEventListener(\"abort\", onAbort);\n\t}\n\tsignal.addEventListener(\"abort\", onAbort);\n}\n\n//#endregion\n//#region src/lib/with-resolvers.ts\nfunction withResolvers() {\n\tconst P = Promise;\n\tif (Promise.hasOwnProperty(\"withResolvers\")) return Promise.withResolvers();\n\tlet resolve = () => {};\n\tlet reject = () => {};\n\tconst promise = new P((res, rej) => {\n\t\tresolve = res;\n\t\treject = rej;\n\t});\n\treturn {\n\t\tpromise,\n\t\tresolve,\n\t\treject\n\t};\n}\n\n//#endregion\n//#region src/lib/compose.ts\nfunction compose(fns, final) {\n\tlet next = final;\n\tfor (let i = fns.length - 1; i >= 0; i--) {\n\t\tconst fn = fns[i];\n\t\tif (!fn) continue;\n\t\tconst prev = next;\n\t\tnext = () => fn(prev);\n\t}\n\tnext();\n}\n\n//#endregion\n//#region src/lib/queues/throttle.ts\nfunction getSearchParamsSnapshotFromLocation() {\n\treturn new URLSearchParams(location.search);\n}\nvar ThrottledQueue = class {\n\tupdateMap = /* @__PURE__ */ new Map();\n\toptions = {\n\t\thistory: \"replace\",\n\t\tscroll: false,\n\t\tshallow: true\n\t};\n\ttimeMs = defaultRateLimit.timeMs;\n\ttransitions = /* @__PURE__ */ new Set();\n\tresolvers = null;\n\tcontroller = null;\n\tlastFlushedAt = 0;\n\tpush({ key, query, options }, timeMs = defaultRateLimit.timeMs) {\n\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs gtq] Enqueueing %s=%s %O\", key, query, options);\n\t\tthis.updateMap.set(key, query);\n\t\tif (options.history === \"push\") this.options.history = \"push\";\n\t\tif (options.scroll) this.options.scroll = true;\n\t\tif (options.shallow === false) this.options.shallow = false;\n\t\tif (options.startTransition) this.transitions.add(options.startTransition);\n\t\tif (!Number.isFinite(this.timeMs) || timeMs > this.timeMs) this.timeMs = timeMs;\n\t}\n\tgetQueuedQuery(key) {\n\t\treturn this.updateMap.get(key);\n\t}\n\tflush({ getSearchParamsSnapshot = getSearchParamsSnapshotFromLocation, rateLimitFactor = 1,...adapter }) {\n\t\tthis.controller ??= new AbortController();\n\t\tif (!Number.isFinite(this.timeMs)) {\n\t\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs gtq] Skipping flush due to throttleMs=Infinity\");\n\t\t\treturn Promise.resolve(getSearchParamsSnapshot());\n\t\t}\n\t\tif (this.resolvers) return this.resolvers.promise;\n\t\tthis.resolvers = withResolvers();\n\t\tconst flushNow = () => {\n\t\t\tthis.lastFlushedAt = performance.now();\n\t\t\tconst [search, error$1] = this.applyPendingUpdates({\n\t\t\t\t...adapter,\n\t\t\t\tautoResetQueueOnUpdate: adapter.autoResetQueueOnUpdate ?? true,\n\t\t\t\tgetSearchParamsSnapshot\n\t\t\t});\n\t\t\tif (error$1 === null) this.resolvers.resolve(search);\n\t\t\telse this.resolvers.reject(search);\n\t\t\tthis.resolvers = null;\n\t\t};\n\t\tconst runOnNextTick = () => {\n\t\t\tconst now = performance.now();\n\t\t\tconst timeSinceLastFlush = now - this.lastFlushedAt;\n\t\t\tconst timeMs = this.timeMs;\n\t\t\tconst flushInMs = rateLimitFactor * Math.max(0, timeMs - timeSinceLastFlush);\n\t\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(`[nuqs gtq] Scheduling flush in %f ms. Throttled at %f ms (x%f)`, flushInMs, timeMs, rateLimitFactor);\n\t\t\tif (flushInMs === 0) flushNow();\n\t\t\telse timeout(flushNow, flushInMs, this.controller.signal);\n\t\t};\n\t\ttimeout(runOnNextTick, 0, this.controller.signal);\n\t\treturn this.resolvers.promise;\n\t}\n\tabort() {\n\t\tthis.controller?.abort();\n\t\tthis.controller = new AbortController();\n\t\tthis.resolvers?.resolve(new URLSearchParams());\n\t\tthis.resolvers = null;\n\t\treturn this.reset();\n\t}\n\treset() {\n\t\tconst queuedKeys = Array.from(this.updateMap.keys());\n\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs gtq] Resetting queue %s\", JSON.stringify(Object.fromEntries(this.updateMap)));\n\t\tthis.updateMap.clear();\n\t\tthis.transitions.clear();\n\t\tthis.options = {\n\t\t\thistory: \"replace\",\n\t\t\tscroll: false,\n\t\t\tshallow: true\n\t\t};\n\t\tthis.timeMs = defaultRateLimit.timeMs;\n\t\treturn queuedKeys;\n\t}\n\tapplyPendingUpdates(adapter) {\n\t\tconst { updateUrl, getSearchParamsSnapshot } = adapter;\n\t\tconst search = getSearchParamsSnapshot();\n\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(`[nuqs gtq] Applying %d pending update(s) on top of %s`, this.updateMap.size, search.toString());\n\t\tif (this.updateMap.size === 0) return [search, null];\n\t\tconst items = Array.from(this.updateMap.entries());\n\t\tconst options = { ...this.options };\n\t\tconst transitions = Array.from(this.transitions);\n\t\tif (adapter.autoResetQueueOnUpdate) this.reset();\n\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs gtq] Flushing queue %O with options %O\", items, options);\n\t\tfor (const [key, value] of items) if (value === null) search.delete(key);\n\t\telse search.set(key, value);\n\t\ttry {\n\t\t\tcompose(transitions, () => {\n\t\t\t\tupdateUrl(search, options);\n\t\t\t});\n\t\t\treturn [search, null];\n\t\t} catch (err) {\n\t\t\tconsole.error((0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.error)(429), items.map(([key]) => key).join(), err);\n\t\t\treturn [search, err];\n\t\t}\n\t}\n};\nconst globalThrottleQueue = new ThrottledQueue();\n\n//#endregion\n//#region src/lib/queues/useSyncExternalStores.ts\n/**\n* Like `useSyncExternalStore`, but for subscribing to multiple keys.\n*\n* Each key becomes the key of the returned object,\n* and the value is the result of calling `getKeySnapshot` with that key.\n*\n* @param keys - A list of keys to subscribe to.\n* @param subscribeKey - A function that takes a key and a callback,\n* subscribes to an external store using that key (calling the callback when\n* state changes occur), and returns a function to unsubscribe from that key.\n* @param getKeySnapshot - A function that takes a key and returns the snapshot for that key.\n* It will be called on the server and on the client, so it needs to handle both\n* environments.\n*/\nfunction useSyncExternalStores(keys, subscribeKey, getKeySnapshot) {\n\tconst snapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n\t\tconst record = Object.fromEntries(keys.map((key) => [key, getKeySnapshot(key)]));\n\t\tconst cacheKey = JSON.stringify(record);\n\t\treturn [cacheKey, record];\n\t}, [keys.join(\",\"), getKeySnapshot]);\n\tconst cacheRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n\tif (cacheRef.current === null) cacheRef.current = snapshot();\n\tconst subscribe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback) => {\n\t\tconst off = keys.map((key) => subscribeKey(key, callback));\n\t\treturn () => off.forEach((unsubscribe) => unsubscribe());\n\t}, [keys.join(\",\"), subscribeKey]);\n\treturn (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(subscribe, () => {\n\t\tconst [cacheKey, record] = snapshot();\n\t\tif (cacheRef.current[0] === cacheKey) return cacheRef.current[1];\n\t\tcacheRef.current = [cacheKey, record];\n\t\treturn record;\n\t}, () => cacheRef.current[1]);\n}\n\n//#endregion\n//#region src/lib/queues/debounce.ts\nvar DebouncedPromiseQueue = class {\n\tcallback;\n\tresolvers = withResolvers();\n\tcontroller = new AbortController();\n\tqueuedValue = void 0;\n\tconstructor(callback) {\n\t\tthis.callback = callback;\n\t}\n\tabort() {\n\t\tthis.controller.abort();\n\t\tthis.queuedValue = void 0;\n\t}\n\tpush(value, timeMs) {\n\t\tthis.queuedValue = value;\n\t\tthis.controller.abort();\n\t\tthis.controller = new AbortController();\n\t\ttimeout(() => {\n\t\t\tconst outputResolvers = this.resolvers;\n\t\t\ttry {\n\t\t\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs dq] Flushing debounce queue\", value);\n\t\t\t\tconst callbackPromise = this.callback(value);\n\t\t\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs dq] Reset debounce queue %O\", this.queuedValue);\n\t\t\t\tthis.queuedValue = void 0;\n\t\t\t\tthis.resolvers = withResolvers();\n\t\t\t\tcallbackPromise.then((output) => outputResolvers.resolve(output)).catch((error$1) => outputResolvers.reject(error$1));\n\t\t\t} catch (error$1) {\n\t\t\t\tthis.queuedValue = void 0;\n\t\t\t\toutputResolvers.reject(error$1);\n\t\t\t}\n\t\t}, timeMs, this.controller.signal);\n\t\treturn this.resolvers.promise;\n\t}\n};\nvar DebounceController = class {\n\tthrottleQueue;\n\tqueues = /* @__PURE__ */ new Map();\n\tqueuedQuerySync = createEmitter();\n\tconstructor(throttleQueue = new ThrottledQueue()) {\n\t\tthis.throttleQueue = throttleQueue;\n\t}\n\tuseQueuedQueries(keys) {\n\t\treturn useSyncExternalStores(keys, (key, callback) => this.queuedQuerySync.on(key, callback), (key) => this.getQueuedQuery(key));\n\t}\n\tpush(update, timeMs, adapter) {\n\t\tif (!Number.isFinite(timeMs)) {\n\t\t\tconst getSnapshot = adapter.getSearchParamsSnapshot ?? getSearchParamsSnapshotFromLocation;\n\t\t\treturn Promise.resolve(getSnapshot());\n\t\t}\n\t\tconst key = update.key;\n\t\tif (!this.queues.has(key)) {\n\t\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs dqc] Creating debounce queue for `%s`\", key);\n\t\t\tconst queue = new DebouncedPromiseQueue((update$1) => {\n\t\t\t\tthis.throttleQueue.push(update$1);\n\t\t\t\treturn this.throttleQueue.flush(adapter).finally(() => {\n\t\t\t\t\tconst queuedValue = this.queues.get(update$1.key)?.queuedValue;\n\t\t\t\t\tif (queuedValue === void 0) {\n\t\t\t\t\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs dqc] Cleaning up empty queue for `%s`\", update$1.key);\n\t\t\t\t\t\tthis.queues.delete(update$1.key);\n\t\t\t\t\t}\n\t\t\t\t\tthis.queuedQuerySync.emit(update$1.key);\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.queues.set(key, queue);\n\t\t}\n\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs dqc] Enqueueing debounce update %O\", update);\n\t\tconst promise = this.queues.get(key).push(update, timeMs);\n\t\tthis.queuedQuerySync.emit(key);\n\t\treturn promise;\n\t}\n\tabort(key) {\n\t\tconst queue = this.queues.get(key);\n\t\tif (!queue) return (passThrough) => passThrough;\n\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs dqc] Aborting debounce queue %s=%s\", key, queue.queuedValue?.query);\n\t\tthis.queues.delete(key);\n\t\tqueue.abort();\n\t\tthis.queuedQuerySync.emit(key);\n\t\treturn (promise) => {\n\t\t\tpromise.then(queue.resolvers.resolve, queue.resolvers.reject);\n\t\t\treturn promise;\n\t\t};\n\t}\n\tabortAll() {\n\t\tfor (const [key, queue] of this.queues.entries()) {\n\t\t\t(0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuqs dqc] Aborting debounce queue %s=%s\", key, queue.queuedValue?.query);\n\t\t\tqueue.abort();\n\t\t\tqueue.resolvers.resolve(new URLSearchParams());\n\t\t\tthis.queuedQuerySync.emit(key);\n\t\t}\n\t\tthis.queues.clear();\n\t}\n\tgetQueuedQuery(key) {\n\t\tconst debouncedQueued = this.queues.get(key)?.queuedValue?.query;\n\t\tif (debouncedQueued !== void 0) return debouncedQueued;\n\t\treturn this.throttleQueue.getQueuedQuery(key);\n\t}\n};\nconst debounceController = new DebounceController(globalThrottleQueue);\n\n//#endregion\n\n//# sourceMappingURL=debounce-CmqzOOem.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nuqs/dist/debounce-CmqzOOem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/nuqs/dist/index.js":
/*!*****************************************!*\
  !*** ./node_modules/nuqs/dist/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLoader: () => (/* binding */ createLoader),\n/* harmony export */   createParser: () => (/* binding */ createParser),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer),\n/* harmony export */   createStandardSchemaV1: () => (/* binding */ createStandardSchemaV1),\n/* harmony export */   debounce: () => (/* reexport safe */ _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.debounce),\n/* harmony export */   defaultRateLimit: () => (/* reexport safe */ _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.defaultRateLimit),\n/* harmony export */   parseAsArrayOf: () => (/* binding */ parseAsArrayOf),\n/* harmony export */   parseAsBoolean: () => (/* binding */ parseAsBoolean),\n/* harmony export */   parseAsFloat: () => (/* binding */ parseAsFloat),\n/* harmony export */   parseAsHex: () => (/* binding */ parseAsHex),\n/* harmony export */   parseAsIndex: () => (/* binding */ parseAsIndex),\n/* harmony export */   parseAsInteger: () => (/* binding */ parseAsInteger),\n/* harmony export */   parseAsIsoDate: () => (/* binding */ parseAsIsoDate),\n/* harmony export */   parseAsIsoDateTime: () => (/* binding */ parseAsIsoDateTime),\n/* harmony export */   parseAsJson: () => (/* binding */ parseAsJson),\n/* harmony export */   parseAsNumberLiteral: () => (/* binding */ parseAsNumberLiteral),\n/* harmony export */   parseAsString: () => (/* binding */ parseAsString),\n/* harmony export */   parseAsStringEnum: () => (/* binding */ parseAsStringEnum),\n/* harmony export */   parseAsStringLiteral: () => (/* binding */ parseAsStringLiteral),\n/* harmony export */   parseAsTimestamp: () => (/* binding */ parseAsTimestamp),\n/* harmony export */   throttle: () => (/* reexport safe */ _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.throttle),\n/* harmony export */   useQueryState: () => (/* binding */ useQueryState),\n/* harmony export */   useQueryStates: () => (/* binding */ useQueryStates)\n/* harmony export */ });\n/* harmony import */ var _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debounce-CmqzOOem.js */ \"(ssr)/./node_modules/nuqs/dist/debounce-CmqzOOem.js\");\n/* harmony import */ var _context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context-BWo_DoaC.js */ \"(ssr)/./node_modules/nuqs/dist/context-BWo_DoaC.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ createLoader,createParser,createSerializer,createStandardSchemaV1,debounce,defaultRateLimit,parseAsArrayOf,parseAsBoolean,parseAsFloat,parseAsHex,parseAsIndex,parseAsInteger,parseAsIsoDate,parseAsIsoDateTime,parseAsJson,parseAsNumberLiteral,parseAsString,parseAsStringEnum,parseAsStringLiteral,parseAsTimestamp,throttle,useQueryState,useQueryStates auto */ \n\n\n//#region src/loader.ts\nfunction createLoader(parsers, { urlKeys = {} } = {}) {\n    function loadSearchParams(input, { strict = false } = {}) {\n        if (input instanceof Promise) return input.then((i)=>loadSearchParams(i, {\n                strict\n            }));\n        const searchParams = extractSearchParams(input);\n        const result = {};\n        for (const [key, parser] of Object.entries(parsers)){\n            const urlKey = urlKeys[key] ?? key;\n            const query = searchParams.get(urlKey);\n            if (query === null) {\n                result[key] = parser.defaultValue ?? null;\n                continue;\n            }\n            let parsedValue;\n            try {\n                parsedValue = parser.parse(query);\n            } catch (error) {\n                if (strict) throw new Error(`[nuqs] Error while parsing query \\`${query}\\` for key \\`${key}\\`: ${error}`);\n                parsedValue = null;\n            }\n            if (strict && query && parsedValue === null) throw new Error(`[nuqs] Failed to parse query \\`${query}\\` for key \\`${key}\\` (got null)`);\n            result[key] = parsedValue ?? parser.defaultValue ?? null;\n        }\n        return result;\n    }\n    return loadSearchParams;\n}\nfunction extractSearchParams(input) {\n    try {\n        if (input instanceof Request) return input.url ? new URL(input.url).searchParams : new URLSearchParams();\n        if (input instanceof URL) return input.searchParams;\n        if (input instanceof URLSearchParams) return input;\n        if (typeof input === \"object\") {\n            const searchParams = new URLSearchParams();\n            for (const [key, value] of Object.entries(input))if (Array.isArray(value)) for (const v of value)searchParams.append(key, v);\n            else if (value !== void 0) searchParams.set(key, value);\n            return searchParams;\n        }\n        if (typeof input === \"string\") {\n            if (URL.hasOwnProperty(\"canParse\") && URL.canParse(input)) return new URL(input).searchParams;\n            return new URLSearchParams(input);\n        }\n    } catch  {}\n    return new URLSearchParams();\n}\n//#endregion\n//#region src/lib/safe-parse.ts\nfunction safeParse(parser, value, key) {\n    try {\n        return parser(value);\n    } catch (error) {\n        (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.warn)(\"[nuqs] Error while parsing value `%s`: %O\" + (key ? \" (for key `%s`)\" : \"\"), value, error, key);\n        return null;\n    }\n}\n//#endregion\n//#region src/parsers.ts\n/**\n* Wrap a set of parse/serialize functions into a builder pattern parser\n* you can pass to one of the hooks, making its default value type safe.\n*/ function createParser(parser) {\n    function parseServerSideNullable(value) {\n        if (typeof value === \"undefined\") return null;\n        let str = \"\";\n        if (Array.isArray(value)) {\n            if (value[0] === void 0) return null;\n            str = value[0];\n        }\n        if (typeof value === \"string\") str = value;\n        return safeParse(parser.parse, str);\n    }\n    return {\n        eq: (a, b)=>a === b,\n        ...parser,\n        parseServerSide: parseServerSideNullable,\n        withDefault (defaultValue) {\n            return {\n                ...this,\n                defaultValue,\n                parseServerSide (value) {\n                    return parseServerSideNullable(value) ?? defaultValue;\n                }\n            };\n        },\n        withOptions (options) {\n            return {\n                ...this,\n                ...options\n            };\n        }\n    };\n}\nconst parseAsString = createParser({\n    parse: (v)=>v,\n    serialize: String\n});\nconst parseAsInteger = createParser({\n    parse: (v)=>{\n        const int = parseInt(v);\n        return int == int ? int : null;\n    },\n    serialize: (v)=>\"\" + Math.round(v)\n});\nconst parseAsIndex = createParser({\n    parse: (v)=>{\n        const int = parseInt(v);\n        return int == int ? int - 1 : null;\n    },\n    serialize: (v)=>\"\" + Math.round(v + 1)\n});\nconst parseAsHex = createParser({\n    parse: (v)=>{\n        const int = parseInt(v, 16);\n        return int == int ? int : null;\n    },\n    serialize: (v)=>{\n        const hex = Math.round(v).toString(16);\n        return (hex.length & 1 ? \"0\" : \"\") + hex;\n    }\n});\nconst parseAsFloat = createParser({\n    parse: (v)=>{\n        const float = parseFloat(v);\n        return float == float ? float : null;\n    },\n    serialize: String\n});\nconst parseAsBoolean = createParser({\n    parse: (v)=>v === \"true\",\n    serialize: String\n});\nfunction compareDates(a, b) {\n    return a.valueOf() === b.valueOf();\n}\n/**\n* Querystring encoded as the number of milliseconds since epoch,\n* and returned as a Date object.\n*/ const parseAsTimestamp = createParser({\n    parse: (v)=>{\n        const ms = parseInt(v);\n        return ms == ms ? new Date(ms) : null;\n    },\n    serialize: (v)=>\"\" + v.valueOf(),\n    eq: compareDates\n});\n/**\n* Querystring encoded as an ISO-8601 string (UTC),\n* and returned as a Date object.\n*/ const parseAsIsoDateTime = createParser({\n    parse: (v)=>{\n        const date = new Date(v);\n        return date.valueOf() == date.valueOf() ? date : null;\n    },\n    serialize: (v)=>v.toISOString(),\n    eq: compareDates\n});\n/**\n* Querystring encoded as an ISO-8601 string (UTC)\n* without the time zone offset, and returned as\n* a Date object.\n*\n* The Date is parsed without the time zone offset,\n* making it at 00:00:00 UTC.\n*/ const parseAsIsoDate = createParser({\n    parse: (v)=>{\n        const date = new Date(v.slice(0, 10));\n        return date.valueOf() == date.valueOf() ? date : null;\n    },\n    serialize: (v)=>v.toISOString().slice(0, 10),\n    eq: compareDates\n});\n/**\n* String-based enums provide better type-safety for known sets of values.\n* You will need to pass the parseAsStringEnum function a list of your enum values\n* in order to validate the query string. Anything else will return `null`,\n* or your default value if specified.\n*\n* Example:\n* ```ts\n* enum Direction {\n*   up = 'UP',\n*   down = 'DOWN',\n*   left = 'LEFT',\n*   right = 'RIGHT'\n* }\n*\n* const [direction, setDirection] = useQueryState(\n*   'direction',\n*    parseAsStringEnum<Direction>(Object.values(Direction)) // pass a list of allowed values\n*      .withDefault(Direction.up)\n* )\n* ```\n*\n* Note: the query string value will be the value of the enum, not its name\n* (example above: `direction=UP`).\n*\n* @param validValues The values you want to accept\n*/ function parseAsStringEnum(validValues) {\n    return parseAsStringLiteral(validValues);\n}\n/**\n* String-based literals provide better type-safety for known sets of values.\n* You will need to pass the parseAsStringLiteral function a list of your string values\n* in order to validate the query string. Anything else will return `null`,\n* or your default value if specified.\n*\n* Example:\n* ```ts\n* const colors = [\"red\", \"green\", \"blue\"] as const\n*\n* const [color, setColor] = useQueryState(\n*   'color',\n*    parseAsStringLiteral(colors) // pass a readonly list of allowed values\n*      .withDefault(\"red\")\n* )\n* ```\n*\n* @param validValues The values you want to accept\n*/ function parseAsStringLiteral(validValues) {\n    return createParser({\n        parse: (query)=>{\n            const asConst = query;\n            return validValues.includes(asConst) ? asConst : null;\n        },\n        serialize: String\n    });\n}\n/**\n* Number-based literals provide better type-safety for known sets of values.\n* You will need to pass the parseAsNumberLiteral function a list of your number values\n* in order to validate the query string. Anything else will return `null`,\n* or your default value if specified.\n*\n* Example:\n* ```ts\n* const diceSides = [1, 2, 3, 4, 5, 6] as const\n*\n* const [side, setSide] = useQueryState(\n*   'side',\n*    parseAsNumberLiteral(diceSides) // pass a readonly list of allowed values\n*      .withDefault(4)\n* )\n* ```\n*\n* @param validValues The values you want to accept\n*/ function parseAsNumberLiteral(validValues) {\n    return createParser({\n        parse: (query)=>{\n            const asConst = parseFloat(query);\n            if (validValues.includes(asConst)) return asConst;\n            return null;\n        },\n        serialize: String\n    });\n}\n/**\n* Encode any object shape into the querystring value as JSON.\n* Note: you may want to use `useQueryStates` for finer control over\n* multiple related query keys.\n*\n* @param runtimeParser Runtime parser (eg: Zod schema or Standard Schema) to validate after JSON.parse\n*/ function parseAsJson(validator) {\n    return createParser({\n        parse: (query)=>{\n            try {\n                const obj = JSON.parse(query);\n                if (\"~standard\" in validator) {\n                    const result = validator[\"~standard\"].validate(obj);\n                    if (result instanceof Promise) throw new Error(\"[nuqs] Only synchronous Standard Schemas are supported in parseAsJson.\");\n                    return result.issues ? null : result.value;\n                }\n                return validator(obj);\n            } catch  {\n                return null;\n            }\n        },\n        serialize: (value)=>JSON.stringify(value),\n        eq (a, b) {\n            return a === b || JSON.stringify(a) === JSON.stringify(b);\n        }\n    });\n}\n/**\n* A comma-separated list of items.\n* Items are URI-encoded for safety, so they may not look nice in the URL.\n*\n* @param itemParser Parser for each individual item in the array\n* @param separator The character to use to separate items (default ',')\n*/ function parseAsArrayOf(itemParser, separator = \",\") {\n    const itemEq = itemParser.eq ?? ((a, b)=>a === b);\n    const encodedSeparator = encodeURIComponent(separator);\n    return createParser({\n        parse: (query)=>{\n            if (query === \"\") return [];\n            return query.split(separator).map((item, index)=>safeParse(itemParser.parse, item.replaceAll(encodedSeparator, separator), `[${index}]`)).filter((value)=>value !== null && value !== void 0);\n        },\n        serialize: (values)=>values.map((value)=>{\n                const str = itemParser.serialize ? itemParser.serialize(value) : String(value);\n                return str.replaceAll(separator, encodedSeparator);\n            }).join(separator),\n        eq (a, b) {\n            if (a === b) return true;\n            if (a.length !== b.length) return false;\n            return a.every((value, index)=>itemEq(value, b[index]));\n        }\n    });\n}\n//#endregion\n//#region src/serializer.ts\nfunction createSerializer(parsers, { clearOnDefault = true, urlKeys = {} } = {}) {\n    function serialize(arg1BaseOrValues, arg2values = {}) {\n        const [base, search] = isBase(arg1BaseOrValues) ? splitBase(arg1BaseOrValues) : [\n            \"\",\n            new URLSearchParams()\n        ];\n        const values = isBase(arg1BaseOrValues) ? arg2values : arg1BaseOrValues;\n        if (values === null) {\n            for(const key in parsers){\n                const urlKey = urlKeys[key] ?? key;\n                search.delete(urlKey);\n            }\n            return base + (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.renderQueryString)(search);\n        }\n        for(const key in parsers){\n            const parser = parsers[key];\n            const value = values[key];\n            if (!parser || value === void 0) continue;\n            const urlKey = urlKeys[key] ?? key;\n            const isMatchingDefault = parser.defaultValue !== void 0 && (parser.eq ?? ((a, b)=>a === b))(value, parser.defaultValue);\n            if (value === null || (parser.clearOnDefault ?? clearOnDefault ?? true) && isMatchingDefault) search.delete(urlKey);\n            else search.set(urlKey, parser.serialize(value));\n        }\n        return base + (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.renderQueryString)(search);\n    }\n    return serialize;\n}\nfunction isBase(base) {\n    return typeof base === \"string\" || base instanceof URLSearchParams || base instanceof URL;\n}\nfunction splitBase(base) {\n    if (typeof base === \"string\") {\n        const [path = \"\", ...search] = base.split(\"?\");\n        return [\n            path,\n            new URLSearchParams(search.join(\"?\"))\n        ];\n    } else if (base instanceof URLSearchParams) return [\n        \"\",\n        new URLSearchParams(base)\n    ];\n    else return [\n        base.origin + base.pathname,\n        new URLSearchParams(base.searchParams)\n    ];\n}\n//#endregion\n//#region src/standard-schema.ts\nfunction createStandardSchemaV1(parsers, { urlKeys, partialOutput = false } = {}) {\n    const serialize = createSerializer(parsers, {\n        urlKeys\n    });\n    const load = createLoader(parsers, {\n        urlKeys\n    });\n    return {\n        \"~standard\": {\n            version: 1,\n            vendor: \"nuqs\",\n            validate (input) {\n                try {\n                    const url = serialize(input);\n                    const value = load(url, {\n                        strict: true\n                    });\n                    if (partialOutput) {\n                        for(const key in value)if (!(key in input)) delete value[key];\n                    }\n                    return {\n                        value\n                    };\n                } catch (error) {\n                    return {\n                        issues: [\n                            {\n                                message: error instanceof Error ? error.message : String(error)\n                            }\n                        ]\n                    };\n                }\n            }\n        }\n    };\n}\n//#endregion\n//#region src/lib/sync.ts\nconst emitter = (0,_debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.createEmitter)();\n//#endregion\n//#region src/useQueryStates.ts\nconst defaultUrlKeys = {};\n/**\n* Synchronise multiple query string arguments to React state in Next.js\n*\n* @param keys - An object describing the keys to synchronise and how to\n*               serialise and parse them.\n*               Use `parseAs(String|Integer|Float|...)` for quick shorthands.\n* @param options - Optional history mode, shallow routing and scroll restoration options.\n*/ function useQueryStates(keyMap, options = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const defaultOptions = (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.useAdapterDefaultOptions)();\n    const { history = \"replace\", scroll = defaultOptions?.scroll ?? false, shallow = defaultOptions?.shallow ?? true, throttleMs = _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.defaultRateLimit.timeMs, limitUrlUpdates = defaultOptions?.limitUrlUpdates, clearOnDefault = defaultOptions?.clearOnDefault ?? true, startTransition: startTransition$1, urlKeys = defaultUrlKeys } = options;\n    const stateKeys = Object.keys(keyMap).join(\",\");\n    const resolvedUrlKeys = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useQueryStates.useMemo[resolvedUrlKeys]\": ()=>Object.fromEntries(Object.keys(keyMap).map({\n                \"useQueryStates.useMemo[resolvedUrlKeys]\": (key)=>[\n                        key,\n                        urlKeys[key] ?? key\n                    ]\n            }[\"useQueryStates.useMemo[resolvedUrlKeys]\"]))\n    }[\"useQueryStates.useMemo[resolvedUrlKeys]\"], [\n        stateKeys,\n        JSON.stringify(urlKeys)\n    ]);\n    const adapter = (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.useAdapter)(Object.values(resolvedUrlKeys));\n    const initialSearchParams = adapter.searchParams;\n    const queryRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const defaultValues = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useQueryStates.useMemo[defaultValues]\": ()=>Object.fromEntries(Object.keys(keyMap).map({\n                \"useQueryStates.useMemo[defaultValues]\": (key)=>[\n                        key,\n                        keyMap[key].defaultValue ?? null\n                    ]\n            }[\"useQueryStates.useMemo[defaultValues]\"]))\n    }[\"useQueryStates.useMemo[defaultValues]\"], [\n        Object.values(keyMap).map({\n            \"useQueryStates.useMemo[defaultValues]\": ({ defaultValue })=>defaultValue\n        }[\"useQueryStates.useMemo[defaultValues]\"]).join(\",\")\n    ]);\n    const queuedQueries = _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.debounceController.useQueuedQueries(Object.values(resolvedUrlKeys));\n    const [internalState, setInternalState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useQueryStates.useState\": ()=>{\n            const source = initialSearchParams ?? new URLSearchParams();\n            return parseMap(keyMap, urlKeys, source, queuedQueries).state;\n        }\n    }[\"useQueryStates.useState\"]);\n    const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(internalState);\n    (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] render - state: %O, iSP: %s\", hookId, stateKeys, internalState, initialSearchParams);\n    if (Object.keys(queryRef.current).join(\"&\") !== Object.values(resolvedUrlKeys).join(\"&\")) {\n        const { state, hasChanged } = parseMap(keyMap, urlKeys, initialSearchParams, queuedQueries, queryRef.current, stateRef.current);\n        if (hasChanged) {\n            (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] State changed: %O\", hookId, stateKeys, {\n                state,\n                initialSearchParams,\n                queuedQueries,\n                queryRef: queryRef.current,\n                stateRef: stateRef.current\n            });\n            stateRef.current = state;\n            setInternalState(state);\n        }\n        queryRef.current = Object.fromEntries(Object.values(resolvedUrlKeys).map((urlKey)=>[\n                urlKey,\n                initialSearchParams?.get(urlKey) ?? null\n            ]));\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useQueryStates.useEffect\": ()=>{\n            const { state, hasChanged } = parseMap(keyMap, urlKeys, initialSearchParams, queuedQueries, queryRef.current, stateRef.current);\n            if (hasChanged) {\n                (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] State changed: %O\", hookId, stateKeys, {\n                    state,\n                    initialSearchParams,\n                    queuedQueries,\n                    queryRef: queryRef.current,\n                    stateRef: stateRef.current\n                });\n                stateRef.current = state;\n                setInternalState(state);\n            }\n        }\n    }[\"useQueryStates.useEffect\"], [\n        Object.values(resolvedUrlKeys).map({\n            \"useQueryStates.useEffect\": (key)=>`${key}=${initialSearchParams?.get(key)}`\n        }[\"useQueryStates.useEffect\"]).join(\"&\"),\n        JSON.stringify(queuedQueries)\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useQueryStates.useEffect\": ()=>{\n            function updateInternalState(state) {\n                (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] updateInternalState %O\", hookId, stateKeys, state);\n                stateRef.current = state;\n                setInternalState(state);\n            }\n            const handlers = Object.keys(keyMap).reduce({\n                \"useQueryStates.useEffect.handlers\": (handlers$1, stateKey)=>{\n                    handlers$1[stateKey] = ({\n                        \"useQueryStates.useEffect.handlers\": ({ state, query })=>{\n                            const { defaultValue } = keyMap[stateKey];\n                            const urlKey = resolvedUrlKeys[stateKey];\n                            stateRef.current = {\n                                ...stateRef.current,\n                                [stateKey]: state ?? defaultValue ?? null\n                            };\n                            queryRef.current[urlKey] = query;\n                            (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] Cross-hook key sync %s: %O (default: %O). Resolved: %O\", hookId, stateKeys, urlKey, state, defaultValue, stateRef.current);\n                            updateInternalState(stateRef.current);\n                        }\n                    })[\"useQueryStates.useEffect.handlers\"];\n                    return handlers$1;\n                }\n            }[\"useQueryStates.useEffect.handlers\"], {});\n            for (const stateKey of Object.keys(keyMap)){\n                const urlKey = resolvedUrlKeys[stateKey];\n                (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] Subscribing to sync for `%s`\", hookId, urlKey, stateKeys);\n                emitter.on(urlKey, handlers[stateKey]);\n            }\n            return ({\n                \"useQueryStates.useEffect\": ()=>{\n                    for (const stateKey of Object.keys(keyMap)){\n                        const urlKey = resolvedUrlKeys[stateKey];\n                        (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] Unsubscribing to sync for `%s`\", hookId, urlKey, stateKeys);\n                        emitter.off(urlKey, handlers[stateKey]);\n                    }\n                }\n            })[\"useQueryStates.useEffect\"];\n        }\n    }[\"useQueryStates.useEffect\"], [\n        stateKeys,\n        resolvedUrlKeys\n    ]);\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useQueryStates.useCallback[update]\": (stateUpdater, callOptions = {})=>{\n            const nullMap = Object.fromEntries(Object.keys(keyMap).map({\n                \"useQueryStates.useCallback[update].nullMap\": (key)=>[\n                        key,\n                        null\n                    ]\n            }[\"useQueryStates.useCallback[update].nullMap\"]));\n            const newState = typeof stateUpdater === \"function\" ? stateUpdater(applyDefaultValues(stateRef.current, defaultValues)) ?? nullMap : stateUpdater ?? nullMap;\n            (0,_context_BWo_DoaC_js__WEBPACK_IMPORTED_MODULE_1__.debug)(\"[nuq+ %s `%s`] setState: %O\", hookId, stateKeys, newState);\n            let returnedPromise = void 0;\n            let maxDebounceTime = 0;\n            const debounceAborts = [];\n            for (let [stateKey, value] of Object.entries(newState)){\n                const parser = keyMap[stateKey];\n                const urlKey = resolvedUrlKeys[stateKey];\n                if (!parser) continue;\n                if ((callOptions.clearOnDefault ?? parser.clearOnDefault ?? clearOnDefault) && value !== null && parser.defaultValue !== void 0 && (parser.eq ?? ({\n                    \"useQueryStates.useCallback[update]\": (a, b)=>a === b\n                })[\"useQueryStates.useCallback[update]\"])(value, parser.defaultValue)) value = null;\n                const query = value === null ? null : (parser.serialize ?? String)(value);\n                emitter.emit(urlKey, {\n                    state: value,\n                    query\n                });\n                const update$1 = {\n                    key: urlKey,\n                    query,\n                    options: {\n                        history: callOptions.history ?? parser.history ?? history,\n                        shallow: callOptions.shallow ?? parser.shallow ?? shallow,\n                        scroll: callOptions.scroll ?? parser.scroll ?? scroll,\n                        startTransition: callOptions.startTransition ?? parser.startTransition ?? startTransition$1\n                    }\n                };\n                if (callOptions?.limitUrlUpdates?.method === \"debounce\" || limitUrlUpdates?.method === \"debounce\" || parser.limitUrlUpdates?.method === \"debounce\") {\n                    const timeMs = callOptions?.limitUrlUpdates?.timeMs ?? limitUrlUpdates?.timeMs ?? parser.limitUrlUpdates?.timeMs ?? _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.defaultRateLimit.timeMs;\n                    const debouncedPromise = _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.debounceController.push(update$1, timeMs, adapter);\n                    if (maxDebounceTime < timeMs) {\n                        returnedPromise = debouncedPromise;\n                        maxDebounceTime = timeMs;\n                    }\n                } else {\n                    const timeMs = callOptions?.limitUrlUpdates?.timeMs ?? parser?.limitUrlUpdates?.timeMs ?? limitUrlUpdates?.timeMs ?? callOptions.throttleMs ?? parser.throttleMs ?? throttleMs;\n                    debounceAborts.push(_debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.debounceController.abort(urlKey));\n                    _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.globalThrottleQueue.push(update$1, timeMs);\n                }\n            }\n            const globalPromise = debounceAborts.reduce({\n                \"useQueryStates.useCallback[update].globalPromise\": (previous, fn)=>fn(previous)\n            }[\"useQueryStates.useCallback[update].globalPromise\"], _debounce_CmqzOOem_js__WEBPACK_IMPORTED_MODULE_2__.globalThrottleQueue.flush(adapter));\n            return returnedPromise ?? globalPromise;\n        }\n    }[\"useQueryStates.useCallback[update]\"], [\n        stateKeys,\n        history,\n        shallow,\n        scroll,\n        throttleMs,\n        limitUrlUpdates?.method,\n        limitUrlUpdates?.timeMs,\n        startTransition$1,\n        resolvedUrlKeys,\n        adapter.updateUrl,\n        adapter.getSearchParamsSnapshot,\n        adapter.rateLimitFactor,\n        defaultValues\n    ]);\n    const outputState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useQueryStates.useMemo[outputState]\": ()=>applyDefaultValues(internalState, defaultValues)\n    }[\"useQueryStates.useMemo[outputState]\"], [\n        internalState,\n        defaultValues\n    ]);\n    return [\n        outputState,\n        update\n    ];\n}\nfunction parseMap(keyMap, urlKeys, searchParams, queuedQueries, cachedQuery, cachedState) {\n    let hasChanged = false;\n    const state = Object.keys(keyMap).reduce((out, stateKey)=>{\n        const urlKey = urlKeys?.[stateKey] ?? stateKey;\n        const { parse } = keyMap[stateKey];\n        const queuedQuery = queuedQueries[urlKey];\n        const query = queuedQuery === void 0 ? searchParams?.get(urlKey) ?? null : queuedQuery;\n        if (cachedQuery && cachedState && (cachedQuery[urlKey] ?? null) === query) {\n            out[stateKey] = cachedState[stateKey] ?? null;\n            return out;\n        }\n        hasChanged = true;\n        const value = query === null ? null : safeParse(parse, query, stateKey);\n        out[stateKey] = value ?? null;\n        if (cachedQuery) cachedQuery[urlKey] = query;\n        return out;\n    }, {});\n    if (!hasChanged) {\n        const keyMapKeys = Object.keys(keyMap);\n        const cachedStateKeys = Object.keys(cachedState ?? {});\n        hasChanged = keyMapKeys.length !== cachedStateKeys.length || keyMapKeys.some((key)=>!cachedStateKeys.includes(key));\n    }\n    return {\n        state,\n        hasChanged\n    };\n}\nfunction applyDefaultValues(state, defaults) {\n    return Object.fromEntries(Object.keys(state).map((key)=>[\n            key,\n            state[key] ?? defaults[key] ?? null\n        ]));\n}\n//#endregion\n//#region src/useQueryState.ts\n/**\n* React state hook synchronized with a URL query string in Next.js\n*\n* If used without a `defaultValue` supplied in the options, and the query is\n* missing in the URL, the state will be `null`.\n*\n* ### Behaviour with default values:\n*\n* _Note: the URL will **not** be updated with the default value if the query\n* is missing._\n*\n* Setting the value to `null` will clear the query in the URL, and return\n* the default value as state.\n*\n* Example usage:\n* ```ts\n*   // Blog posts filtering by tag\n*   const [tag, selectTag] = useQueryState('tag')\n*   const filteredPosts = posts.filter(post => tag ? post.tag === tag : true)\n*   const clearTag = () => selectTag(null)\n*\n*   // With default values\n*\n*   const [count, setCount] = useQueryState(\n*     'count',\n*     parseAsInteger.defaultValue(0)\n*   )\n*\n*   const increment = () => setCount(oldCount => oldCount + 1)\n*   const decrement = () => setCount(oldCount => oldCount - 1)\n*   const clearCountQuery = () => setCount(null)\n*\n*   // --\n*\n*   const [date, setDate] = useQueryState(\n*     'date',\n*     parseAsIsoDateTime.withDefault(new Date('2021-01-01'))\n*   )\n*\n*   const setToNow = () => setDate(new Date())\n*   const addOneHour = () => {\n*     setDate(oldDate => new Date(oldDate.valueOf() + 3600_000))\n*   }\n* ```\n* @param key The URL query string key to bind to\n* @param options - Parser (defines the state data type), optional default value and history mode.\n*/ function useQueryState(key, options = {}) {\n    const { parse = (x)=>x, serialize, eq, defaultValue, ...hookOptions } = options;\n    const [{ [key]: state }, setState] = useQueryStates({\n        [key]: {\n            parse,\n            serialize,\n            eq,\n            defaultValue\n        }\n    }, hookOptions);\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useQueryState.useCallback[update]\": (stateUpdater, callOptions = {})=>setState({\n                \"useQueryState.useCallback[update]\": (old)=>({\n                        [key]: typeof stateUpdater === \"function\" ? stateUpdater(old[key]) : stateUpdater\n                    })\n            }[\"useQueryState.useCallback[update]\"], callOptions)\n    }[\"useQueryState.useCallback[update]\"], [\n        key,\n        setState\n    ]);\n    return [\n        state,\n        update\n    ];\n}\n//#endregion\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nuqs/dist/index.js\n");

/***/ })

};
;
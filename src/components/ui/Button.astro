---
export interface Props {
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
  size?: 'sm' | 'default' | 'lg' | 'icon';
  class?: string;
  href?: string;
}

const { variant = 'default', size = 'default', class: className, href, ...props } = Astro.props;

const variants = {
  default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
  destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
  outline: 'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
  secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
  ghost: 'hover:bg-accent hover:text-accent-foreground',
  link: 'text-primary underline-offset-4 hover:underline'
};

const sizes = {
  sm: 'h-8 rounded-md px-3 text-xs',
  default: 'h-9 px-4 py-2',
  lg: 'h-10 rounded-md px-8',
  icon: 'h-9 w-9'
};

const baseClasses = 'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50';
const variantClasses = variants[variant];
const sizeClasses = sizes[size];
---

{href ? (
  <a href={href} class={`${baseClasses} ${variantClasses} ${sizeClasses} ${className || ''}`} {...props}>
    <slot />
  </a>
) : (
  <button class={`${baseClasses} ${variantClasses} ${sizeClasses} ${className || ''}`} {...props}>
    <slot />
  </button>
)}